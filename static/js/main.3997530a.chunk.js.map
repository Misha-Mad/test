{"version":3,"sources":["components/Title/Title.js","components/Loader/Loader.js","components/Vizualizator/Vizualizator.js","utils/SunRiseAPI.js","utils/utils.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Title","className","to","Loader","Vizualizator","isLoading","onGetInfo","info","date","onDate","civilTwilightBeginInPercent","civilTwilightEndInPercent","sunriseTime","sunsetTime","onTodayDateCalculate","useState","disabledWeekAgoButton","setDisabledWeekAgoButton","disabledDayAgoButton","setDisabledDayAgoButton","disabledWeekAfterButton","setDisabledWeekAfterButton","disabledDayAfterButton","setDisabledDayAfterButton","useEffect","split","reverse","join","replace","formatDate","day_length","style","background","disabled","onClick","newDate","sunriseApi","baseUrl","this","_baseUrl","latitude","longitude","fetch","method","headers","then","res","ok","json","Promise","reject","status","App","setInfo","setCivilTwilightBeginInPercent","setcivilTwilightEndInPercent","setSunriseTime","setSunsetTime","setDate","setLatitude","setLongitude","setLoading","timeInPercents","time","secondsSum","includes","forEach","e","i","todayDateCalculate","days","todayDate","Date","getDate","getFullYear","getMonth","navigator","geolocation","getCurrentPosition","position","coords","toFixed","getInfo","useCallback","results","civil_twilight_begin","civil_twilight_end","sunrise","newSunsetTime","sunset","formatTime","setTimeout","catch","err","console","log","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3997530a.chunk.js","sourcesContent":["import {Link} from \"react-router-dom\";\r\nimport './Title.css';\r\n\r\nfunction Title() {\r\n    return (\r\n        <main className={'main'}>\r\n            <h1 className={'main__title'}>Приветствую! </h1>\r\n            <p className={'main__subtitle'}>Рад вам представить простое приложение,\r\n                которое визуализирует данные стороннего API и\r\n                показывает продолжительность дня.</p>\r\n            <Link to=\"/day-length\" className={'main__link'} >Начать</Link>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Title;","import './Loader.css';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader1\">\r\n            <div className=\"neumo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import {useEffect, useState} from 'react';\r\nimport './Vizualizator.css';\r\nimport Loader from '../Loader/Loader'\r\n\r\nfunction Vizualizator({\r\n                          isLoading,\r\n                          onGetInfo,\r\n                          info,\r\n                          date,\r\n                          onDate,\r\n                          civilTwilightBeginInPercent,\r\n                          civilTwilightEndInPercent,\r\n                          sunriseTime,\r\n                          sunsetTime,\r\n                          onTodayDateCalculate\r\n                      }) {\r\n\r\n    const [disabledWeekAgoButton, setDisabledWeekAgoButton] = useState(false);\r\n    const [disabledDayAgoButton, setDisabledDayAgoButton] = useState(false);\r\n    const [disabledWeekAfterButton, setDisabledWeekAfterButton] = useState(false);\r\n    const [disabledDayAfterButton, setDisabledDayAfterButton] = useState(false);\r\n\r\n    function formatDate(date) {\r\n        return date.split('-').reverse().join().replace(/,/g, '/');\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        onGetInfo();\r\n    }, [onGetInfo])\r\n\r\n    function handleGetDataWeekAgo() {\r\n        const newDate = onTodayDateCalculate(-7);\r\n        onDate(newDate);\r\n        onGetInfo();\r\n        setDisabledWeekAgoButton(true);\r\n        setDisabledDayAgoButton(false);\r\n        setDisabledWeekAfterButton(false);\r\n        setDisabledDayAfterButton(false);\r\n    }\r\n\r\n    function handleGetDataDayAgo() {\r\n        const newDate = onTodayDateCalculate(-1);\r\n        onDate(newDate);\r\n        onGetInfo();\r\n        setDisabledWeekAgoButton(false);\r\n        setDisabledDayAgoButton(true);\r\n        setDisabledWeekAfterButton(false);\r\n        setDisabledDayAfterButton(false);\r\n    }\r\n\r\n    function handleGetDataWeekAfter() {\r\n        const newDate = onTodayDateCalculate(7);\r\n        onDate(newDate);\r\n        onGetInfo();\r\n        setDisabledWeekAgoButton(false);\r\n        setDisabledDayAgoButton(false);\r\n        setDisabledWeekAfterButton(true);\r\n        setDisabledDayAfterButton(false);\r\n    }\r\n\r\n    function handleGetDataDayAfter() {\r\n        const newDate = onTodayDateCalculate(1);\r\n        onDate(newDate);\r\n        onGetInfo();\r\n        setDisabledWeekAgoButton(false);\r\n        setDisabledDayAgoButton(false);\r\n        setDisabledWeekAfterButton(false);\r\n        setDisabledDayAfterButton(true);\r\n    }\r\n\r\n    return (\r\n        <div className={'main'}>\r\n            {isLoading ?\r\n                <Loader/> :\r\n                <>\r\n                    <h1 className={'main__title'}>{formatDate(date)}</h1>\r\n                    <p>Sunrise: {sunriseTime}</p>\r\n                    <p>Sunset: {sunsetTime}</p>\r\n                    <p>Length: {info.day_length}</p>\r\n                    <div className={'main__diagramma'}\r\n                         style={{background: `linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(0,212,255,1) ${civilTwilightBeginInPercent}%, rgba(0,212,240,1) ${civilTwilightEndInPercent}%, rgba(2,0,36,1) 100%)`}}/>\r\n                    <div className={'main__dateControls'}>\r\n                        <button disabled={disabledWeekAgoButton} className={'main__dateButton'} onClick={handleGetDataWeekAgo}>- 7 days</button>\r\n                        <button disabled={disabledDayAgoButton} className={'main__dateButton'} onClick={handleGetDataDayAgo}>- 1 day</button>\r\n                        <button disabled={disabledDayAfterButton} className={'main__dateButton'} onClick={handleGetDataDayAfter}>+ 1 day</button>\r\n                        <button disabled={disabledWeekAfterButton} className={'main__dateButton'} onClick={handleGetDataWeekAfter}>+ 7 days</button>\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Vizualizator;","import {CONFIG_SUNRISE_API} from \"./utils\";\r\n\r\n\r\nclass SunRiseAPI {\r\n    constructor({baseUrl}) {\r\n        this._baseUrl = baseUrl;\r\n    }\r\n\r\n    getInfo(date, latitude, longitude) {\r\n        return fetch(`${this._baseUrl}?lat=${latitude}&lng=${longitude}&date=${date}`, {\r\n            method: 'GET',\r\n            headers: {\r\n            }\r\n        })\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(res.status);\r\n            })\r\n    }\r\n}\r\n\r\nconst sunriseApi = new SunRiseAPI(CONFIG_SUNRISE_API);\r\nexport default sunriseApi;","export const CONFIG_SUNRISE_API = {\r\n    baseUrl: 'https://api.sunrise-sunset.org/json',\r\n}","import './App.css';\r\nimport {useState, useEffect, useCallback} from 'react';\r\nimport {HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\nimport Title from '../Title/Title';\r\nimport Vizualizator from '../Vizualizator/Vizualizator';\r\nimport sunriseApi from \"../../utils/SunRiseAPI\";\r\n\r\nfunction App() {\r\n    const [info, setInfo] = useState({});\r\n    const [civilTwilightBeginInPercent, setCivilTwilightBeginInPercent] = useState(30);\r\n    const [civilTwilightEndInPercent, setcivilTwilightEndInPercent] = useState(70);\r\n    const [sunriseTime, setSunriseTime] = useState('00:00:00');\r\n    const [sunsetTime, setSunsetTime] = useState('00:00:00');\r\n    const [date, setDate] = useState('');\r\n    const [latitude, setLatitude] = useState('');\r\n    const [longitude, setLongitude] = useState('');\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    function timeInPercents(time) {\r\n        let secondsSum;\r\n        time.includes('AM') ? secondsSum = 0 : secondsSum = 720;\r\n        const arr = time.split(':', 2);\r\n        arr.forEach((e, i) => {\r\n            if (i === 0) {\r\n                secondsSum += e * 60;\r\n            }\r\n            if (i === 1) {\r\n                secondsSum += +e;\r\n            }\r\n        })\r\n        let onePercent = 1440 / 100;\r\n        return secondsSum / onePercent;\r\n    }\r\n\r\n    function formatTime(results) {\r\n        setSunriseTime(results.sunrise.replace(' AM', ''));\r\n        let newSunsetTime = results.sunset.replace(' PM', '').split(':');\r\n        newSunsetTime[0] = +newSunsetTime[0] + 12;\r\n        newSunsetTime = newSunsetTime.join(':');\r\n        setSunsetTime(newSunsetTime);\r\n    }\r\n\r\n    function todayDateCalculate(days = 0) {\r\n        const todayDate = new Date();\r\n        todayDate.setDate(todayDate.getDate() + days);\r\n        return todayDate.getFullYear() + '-' + (todayDate.getMonth() + 1) + '-' + todayDate.getDate();\r\n    }\r\n\r\n    useEffect(() => {\r\n        const newDate = todayDateCalculate();\r\n        setDate(newDate);\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            setLatitude(position.coords.latitude.toFixed(7));\r\n            setLongitude(position.coords.longitude.toFixed(7));\r\n        });\r\n    }, [])\r\n\r\n    const getInfo = useCallback(() => {\r\n        setLoading(true);\r\n        sunriseApi.getInfo(date, latitude, longitude)\r\n            .then((res) => {\r\n                setInfo(res.results);\r\n                setCivilTwilightBeginInPercent(timeInPercents(res.results.civil_twilight_begin));\r\n                setcivilTwilightEndInPercent(timeInPercents(res.results.civil_twilight_end));\r\n                formatTime(res.results);\r\n            })\r\n            .then(()=> setTimeout(()=> {\r\n                setLoading(false)\r\n            }, 2000))\r\n            .catch(err => console.log(err))\r\n    }, [date, latitude, longitude])\r\n\r\n\r\n    return (\r\n        <HashRouter basename={'/'}>\r\n        <div className='App'>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Title/>\r\n                </Route>\r\n                <Route path=\"/day-length\">\r\n                    {longitude || latitude !== '' ?\r\n                        <Vizualizator\r\n                            isLoading={isLoading}\r\n                            onGetInfo={getInfo}\r\n                            info={info}\r\n                            date={date}\r\n                            onDate={setDate}\r\n                            civilTwilightBeginInPercent={civilTwilightBeginInPercent}\r\n                            civilTwilightEndInPercent={civilTwilightEndInPercent}\r\n                            sunriseTime={sunriseTime}\r\n                            sunsetTime={sunsetTime}\r\n                            onTodayDateCalculate={todayDateCalculate}\r\n                        />\r\n                        : <Redirect to={'/'}/>}\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n          <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}